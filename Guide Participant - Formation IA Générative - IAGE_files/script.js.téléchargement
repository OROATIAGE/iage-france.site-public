document.addEventListener('DOMContentLoaded', () => {
    // Smooth scrolling for sidebar navigation links
    const sidebarLinks = document.querySelectorAll('.sidebar a[href^="#"]');
    // Attempt to get header height dynamically, fallback to a reasonable default
    const header = document.querySelector('header');
    let headerHeight = 80; // Default fallback header height
    if (header) {
        // Use ResizeObserver to update header height if it changes dynamically (e.g., due to responsive changes)
        const resizeObserver = new ResizeObserver(entries => {
            for (let entry of entries) {
                headerHeight = entry.target.offsetHeight;
            }
        });
        resizeObserver.observe(header);
        headerHeight = header.offsetHeight; // Get initial height
    }


    sidebarLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault(); // Prevent default anchor jump

            const targetId = this.getAttribute('href');
            try {
                const targetElement = document.querySelector(targetId);

                if (targetElement) {
                    // Calculate the position of the target element relative to the document top
                    const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
                    // Calculate the final scroll position, subtracting header height and adding a small top margin (e.g., 20px)
                    const offsetPosition = elementPosition - headerHeight - 20;

                    // Use smooth scrolling
                    window.scrollTo({
                        top: offsetPosition,
                        behavior: 'smooth'
                    });
                }
            } catch (error) {
                console.error("Error finding target element for scroll:", targetId, error);
                // Fallback: Jump directly if querySelector fails badly (e.g., invalid ID)
                // window.location.hash = targetId;
            }
        });
    });

    // Optional: Highlight active link in sidebar based on scroll position
    // (Implementation omitted for simplicity - requires Intersection Observer API)
    // const sections = document.querySelectorAll('main section[id]');
    // const observerOptions = {
    //     root: null, // relative to document viewport
    //     rootMargin: '-20% 0px -80% 0px', // Adjust margins to define when a section is "active"
    //     threshold: 0
    // };

    // const observer = new IntersectionObserver((entries, observer) => {
    //     entries.forEach(entry => {
    //         const navLink = document.querySelector(`.sidebar a[href="#${entry.target.id}"]`);
    //         if (entry.isIntersecting) {
    //             // Remove active class from all links first
    //             sidebarLinks.forEach(link => link.classList.remove('active'));
    //             // Add active class to the current link
    //             if (navLink) {
    //                 navLink.classList.add('active');
    //             }
    //         } else {
    //              if (navLink) {
    //                 navLink.classList.remove('active');
    //             }
    //         }
    //     });
    // }, observerOptions);

    // sections.forEach(section => {
    //     observer.observe(section);
    // });
    // You would also need to add a CSS rule for `.sidebar a.active { ... }`

});